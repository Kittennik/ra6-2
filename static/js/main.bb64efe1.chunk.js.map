{"version":3,"sources":["components/NewNote.js","components/NoteItem.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["NewNote","props","useState","text","form","setForm","name","onChange","evt","target","value","prevForm","className","onClick","preventDefault","newNoteText","onFormSubmit","NoteItem","note","id","onDelete","Notes","handleDelete","fetch","URL","method","then","getNotes","handleSbmit","newNote","headers","body","JSON","stringify","response","json","result","setState","notes","state","this","map","item","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6RAGe,SAASA,EAAQC,GAAQ,IAAD,EACbC,mBAAS,CAC/BC,KAAM,KAF6B,mBAC9BC,EAD8B,KACxBC,EADwB,KAyBrC,OACE,8BACE,2CACA,8BAAUC,KAAK,OAAOC,SAvBL,SAACC,GAAS,IAAD,EACJA,EAAIC,OAApBH,EADoB,EACpBA,KAAMI,EADc,EACdA,MACdL,GAAQ,SAACM,GAAD,sBAAoBA,EAApB,eAA+BL,EAAOI,QAqBEA,MAAON,EAAKD,OAC1D,yBAAKS,UAAU,sBAAsBC,QAnBpB,SAACL,GAGpB,GAFAA,EAAIM,iBAEc,KAAdV,EAAKD,KAAa,CACpB,IAAMY,EAAc,CAClBZ,KAAMC,EAAKD,MAGbF,EAAMe,aAAaD,GACnBV,EAAQ,CACNF,KAAM,QASR,YC7BS,SAASc,EAAShB,GAAQ,IAC/BiB,EAASjB,EAATiB,KAMR,OACE,yBAAKN,UAAU,mBACb,2BAAIM,EAAKf,MACT,yBAAKS,UAAU,wBAAwBC,QAAU,WAPhC,IAACM,IAOoDD,EAAKC,GAN7ElB,EAAMmB,SAASD,KAMb,U,ICTeE,E,kDACnB,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAqBRqB,aAAe,SAACH,GACdI,MAAM,GAAD,OAAI,EAAKC,IAAT,YAAgBL,GAAM,CACzBM,OAAQ,WAEPC,MAAK,kBAAM,EAAKC,eA1BF,EA6BnBC,YAAc,SAACC,GACbN,MAAM,EAAKC,IAAK,CACdC,OAAQ,OACRK,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUJ,KAEpBH,MAAK,kBAAM,EAAKC,eArCF,EAwCnBA,SAAW,WACTJ,MAAM,EAAKC,KACRE,MAAK,SAACQ,GAAD,OAAcA,EAASC,UAC5BT,MAAK,SAACU,GACL,EAAKC,SAAS,CAAEC,MAAOF,QA1C3B,EAAKG,MAAQ,CACXD,MAAO,IAET,EAAKd,IAAM,8BALM,E,qDAQT,IAAD,OACP,OACE,oCACE,qCAAU,0BAAMZ,UAAU,yBAAyBC,QAAS2B,KAAKb,YAAvD,YACV,yBAAKf,UAAU,cACZ4B,KAAKD,MAAMD,MAAMG,KAAI,SAACC,GAAD,OACpB,kBAACzB,EAAD,CAAU0B,IAAKD,EAAKvB,GAAID,KAAMwB,EAAMtB,SAAU,EAAKE,mBAGvD,kBAACtB,EAAD,CAASgB,aAAcwB,KAAKZ,iB,0CAgChCY,KAAKb,e,GAlD0BiB,aCQpBC,MARf,WACE,OACE,yBAAKjC,UAAU,aACb,kBAAC,EAAD,QCKckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bb64efe1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function NewNote(props) {\n  const [form, setForm] = useState({\n    text: '',\n  });\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setForm((prevForm) => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (form.text !== '') {\n      const newNoteText = {\n        text: form.text,\n      };\n\n      props.onFormSubmit(newNoteText);\n      setForm({\n        text: '',\n      });\n    }\n  };\n\n  return (\n    <form>\n      <label>New Note</label>\n      <textarea name='text' onChange={handleChange} value={form.text} />\n      <div className=\"material-icons send\" onClick={handleSubmit}>near_me</div>\n    </form>\n  );\n}\n\nNewNote.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function NoteItem(props) {\n  const { note } = props;\n\n  const handleDelete = (id) => {\n    props.onDelete(id);\n  };\n\n  return (\n    <div className='block-item-note'>\n      <p>{note.text}</p>\n      <div className='material-icons delete' onClick={ () => { handleDelete(note.id); } }>clear</div>\n    </div>\n  );\n}\n\nNoteItem.propTypes = {\n  note: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport NewNote from './NewNote';\nimport NoteItem from './NoteItem';\n\nexport default class Notes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [],\n    };\n    this.URL = 'http://localhost:7777/notes';\n  }\n\n  render() {\n    return (\n      <>\n        <h2>Notes <span className='material-icons refresh' onClick={this.getNotes()}>refresh</span></h2>\n        <div className='list-notes'>\n          {this.state.notes.map((item) => (\n            <NoteItem key={item.id} note={item} onDelete={this.handleDelete} />\n          ))}\n        </div>\n        <NewNote onFormSubmit={this.handleSbmit} />\n      </>\n    );\n  }\n\n  handleDelete = (id) => {\n    fetch(`${this.URL}/${id}`, {\n      method: 'DELETE',\n    })\n      .then(() => this.getNotes());\n  }\n\n  handleSbmit = (newNote) => {\n    fetch(this.URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify(newNote),\n    })\n      .then(() => this.getNotes());\n  }\n\n  getNotes = () => {\n    fetch(this.URL)\n      .then((response) => response.json())\n      .then((result) => {\n        this.setState({ notes: result });\n      });\n  }\n\n  componentDidMount() {\n    this.getNotes();\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Notes from './components/Notes';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Notes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}